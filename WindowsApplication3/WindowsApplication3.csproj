<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>9.0.21022</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7CC56C23-E1DA-4482-8FD5-D1FF368A9B51}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>WindowsApplication3</RootNamespace>
    <AssemblyName>WindowsApplication3</AssemblyName>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Xml.Linq">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data.DataSetExtensions">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Deployment" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Form1.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Form1.Designer.cs">
      <DependentUpon>Form1.cs</DependentUpon>
    </Compile>
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <EmbeddedResource Include="Form1.resx">
      <DependentUpon>Form1.cs</DependentUpon>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->


<!--========================================================== 
Extending the build proces
==============================================================-->
<PropertyGroup>
  <BuildDependsOn>
    CustomBeforeBuld;
    $(BuildDependsOn);
    CustomAfterBuild
  </BuildDependsOn>
</PropertyGroup>
<Target Name="CustomBeforeBuld">
  <ItemGroup>
    <_UserConfigFile Include="user.config" />
  </ItemGroup>
  <!-- Since this is before build OutputPath directory may not yet exist -->
  <MakeDir Directories="$(OutputPath)"/>
  <!-- Copy user.config to OutputPath, if it exists -->
  <Copy Condition="Exists('@(_UserConfigFile)')"
        SourceFiles="@(_UserConfigFile)"
        DestinationFiles="@(_UserConfigFile->'$(OutputPath)user.confog')">
    <Output ItemName="_CopiedUserFiles" TaskParameter="CopiedFiles"/>
  </Copy>
  <ItemGroup>
    <FileWrites Include="@(_CopiedUserFiles)"/>
  </ItemGroup>
</Target>

  <PropertyGroup> 
    <_OutputCopyLocation>$(OutputPath)..\..\CustomOutput\</_OutputCopyLocation>
  </PropertyGroup>
 
  <Target Name="CustomAfterBuild">
    <ItemGroup>
      <_FilesToCopy Include="$(OutputPath)**\*"/>
    </ItemGroup>
    <Message Text="_FilesToCopy: @(_FilesToCopy)" Importance="high"/>

    <Message Text="DestFiles: @(_FilesToCopy->'%(RecursiveDir)%(Filename)%(Extension)')"/>

    <Copy SourceFiles="@(_FilesToCopy)"
          DestinationFiles=
          "@(_FilesToCopy->'$(_OutputCopyLocation)%(RecursiveDir)%(Filename)%(Extension)')"/>
  </Target>



<!--========================================================== 
Extending the build proces
==============================================================-->
<Target Name="BeforeClean">
  <Message Text="This target is called before the clean begins"/>
  <!-- Place clean customizations here -->
</Target>
<Target Name="AfterClean">
  <Message Text="This target is called after the clean competes"/>
  <!-- Place clean customizations here -->
</Target>
  
<PropertyGroup>
  <CleanDependsOn>
    $(CleanDependsOn);
    CustomClean
  </CleanDependsOn>
</PropertyGroup>
<Target Name="CustomClean">
  <Message Text="Inside CustomClean" Importance="high"/>
  <ItemGroup>
    <_CustomFilesToDelete Include="$(_OutputCopyLocation)**\*"/>
  </ItemGroup>
  <Delete Files="@(_CustomFilesToDelete)"/>
</Target>

  <!-- Community tasks contain the Zip task -->
  <Import 
    Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets"/>
  <PropertyGroup>
    <BuildDependsOn Condition="$(CreateZipFile)==true">
      $(BuildDependsOn);
      CreateOutputZipFile
    </BuildDependsOn>
  </PropertyGroup>
  <Target Name="CreateOutputZipFile">
    <!-- Create a property that has the full path to the output path -->
    <ItemGroup>
      <_OutputPathItemTemp Include="$(OutputPath)"/>
    </ItemGroup>
    <PropertyGroup>
      <_OutputPathFullPath>@(_OutputPathItemTemp->'%(FullPath)')\</_OutputPathFullPath>
    </PropertyGroup>

    <!-- Pick up all the files that are in the output folder -->
    <ItemGroup>
      <_FilesToZip Include="$(_OutputPathFullPath)**\*"/>
    </ItemGroup>
    
    <Message Text="_FilesToZip: @(_FilesToZip)" Importance="high"/>

    <Zip Files="@(_FilesToZip)"
         ZipFileName="$(_OutputPathFullPath)windows_application3.zip"
         WorkingDirectory="$(_OutputPathFullPath)"
         />
  </Target>
  <PropertyGroup>
    <CleanDependsOn Condition="$(CreateZipFile)==true">
      $(CleanDependsOn);
      CleanOutputZipFile
    </CleanDependsOn>
  </PropertyGroup>
  <Target Name="CleanOutputZipFile" DependsOnTargets="CoreClean">
    <ItemGroup>
      <_ZipFileToDelete Include="$(OutputPath)windows_application3.zip"/>
    </ItemGroup>
    <Message Text="Deleting output zip file" Importance="low"/>
    <Delete Files="@(_ZipFileToDelete)"/>
  </Target>
</Project>